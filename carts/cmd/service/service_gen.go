// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint1 "github.com/go-kit/kit/endpoint"
	log "github.com/go-kit/kit/log"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	http "github.com/go-kit/kit/transport/http"
	group "github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
	endpoint "gokit/ecommerse/carts/pkg/endpoint"
	http1 "gokit/ecommerse/carts/pkg/http"
	service "gokit/ecommerse/carts/pkg/service"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initHttpHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]http.ServerOption {
	options := map[string][]http.ServerOption{
		"AddToCart":      {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AddToCart", logger))},
		"DeleteFromCart": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteFromCart", logger))},
		"GetFromAll":     {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetFromAll", logger))},
		"GetFromCart":    {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetFromCart", logger))},
		"UpdateInCart":   {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateInCart", logger))},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["AddToCart"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "AddToCart")), endpoint.InstrumentingMiddleware(duration.With("method", "AddToCart"))}
	mw["GetFromAll"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetFromAll")), endpoint.InstrumentingMiddleware(duration.With("method", "GetFromAll"))}
	mw["UpdateInCart"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UpdateInCart")), endpoint.InstrumentingMiddleware(duration.With("method", "UpdateInCart"))}
	mw["DeleteFromCart"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "DeleteFromCart")), endpoint.InstrumentingMiddleware(duration.With("method", "DeleteFromCart"))}
	mw["GetFromCart"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetFromCart")), endpoint.InstrumentingMiddleware(duration.With("method", "GetFromCart"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"AddToCart", "GetFromAll", "UpdateInCart", "DeleteFromCart", "GetFromCart"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
